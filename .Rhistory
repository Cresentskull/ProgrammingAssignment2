## Put comments here that give an overall description of what your
## functions do
#Allows users to find the inverse of a matrix.
## Write a short comment describing this function
#allows you to create a matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function(x) x
setInverse <- function(inverseMatrix) m <<- inverseMatrix
getInverse <- function() m
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
#finds the inverse of matrix x
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse
if (!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get
m <- solve(data)
x$setInverse(m)
m
}
d <- c(c(2,5,9), c(6,7,8))
d
d <- matrix(c(1,4,6,8,12,45,23), nrows = 3, ncols = 2)
d <- matrix(c(1,4,6,8,12,45,23), nrow = 3, ncol = 2)
d <- matrix(c(1,4,6,8,12,45), nrow = 3, ncol = 2)
d
solve(d)
d <- matrix(c(1,4,6,9), nrow = 2, ncol = 2)
d
solve(d)
d
makeCacheMatrix(d)
cacheSolve(d)
mkMatrix <- makeCacheMatrix()
mkMatrix$set(d)
mkMatrix$get(d)
mkMatrix$getInverse
cacheSolve(mkMatrix$get(d))
cacheSolve(d)
cacheSolve(mkMatrix)
## Put comments here that give an overall description of what your
## functions do
#Allows users to find the inverse of a matrix.
## Write a short comment describing this function
#allows you to create a matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverseMatrix) m <<- inverseMatrix
getInverse <- function() m
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
#finds the inverse of matrix x
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse
if (!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get
m <- solve(data, ...)
x$setInverse(m)
m
}
mkMatrix = makeCacheMatrix(d)
cacheSolve(mkMatrix)
a <- diag(5, 3)
a
mkMatrix = makeCacheMatrix(a)
cacheSolve(mkMatrix)
cacheSolve(mkMatrix)
## Put comments here that give an overall description of what your
## functions do
#Allows users to find the inverse of a matrix.
## Write a short comment describing this function
#allows you to create a matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverseMatrix) m <<- inverseMatrix
getInverse <- function() m
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
#finds the inverse of matrix x
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if (!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
mkMatrix = makeCacheMatrix(a)
cacheSolve(mkMatrix)
